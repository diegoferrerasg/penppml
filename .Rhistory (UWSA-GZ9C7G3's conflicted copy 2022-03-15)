IDs =  cross_ids$fold, tol=1e-5)
reg5_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = c(seq(0.5, 0.1, by = -0.1), 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001, 0),
xval = TRUE,
IDs =  cross_ids$fold)
reg5_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = c(seq(0.5, 0.1, by = -0.1), 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001, 0),
xval = TRUE,
IDs =  cross_ids$fold, colcheck_x=TRUE,
colcheck_x_fes=TRUE)
reg6 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
method = "plugin",
cluster = c("exp", "imp"))
load_all()
reg6 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
method = "plugin",
cluster = c("exp", "imp"))
provcorr <- cor(trade2[, results$prov])
iceberg_results <- iceberg(data = trade2[, -(1:4)],
dep = results$prov[results$b != 0],
selectobs = (trade2$time == "2016"))
results <- data.frame(prov = rownames(reg6$beta), b_pre = reg6$beta_pre, b = reg6$beta, se = 0)
results$se[!is.na(reg6$beta)] <- reg6$ses
results
iceberg_results <- iceberg(data = trade2[, -(1:4)],
dep = results$prov[results$b != 0],
selectobs = (trade2$time == "2016"))
provcorr <- cor(trade2[, results$prov])
(provcorr <- provcorr[, results$prov[results$b != 0]])
reg1 <- hdfeppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")), colcheck_x = TRUE, colcheck_x_fes=FALSE)
results <- data.frame(prov = rownames(reg1$coefficients), b = reg1$coefficients, se = 0)
results$se[!is.na(reg1$coefficients)] <- reg1$se
results
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
iotu <- as.factor(c(rep("IO", 1000), rep("TU",times=dim(trade2)[1]-1000)))
ab <- as.factor(c(rep("B",times=1000),rep("A", 1000), rep("B",times=dim(trade2)[1]-2000)))
inter <- as.factor(rep("one", dim(trade2)[1]))
# fe_t <- c(rep(1, 300), rep(0,times=dim(trade2)[1]-300))
#fe_s <- c(rep(0,times=300), rep(1, 600), rep(0,times=dim(trade2)[1]-900))
trade2 <- cbind(trade2,iotu)
trade2 <- cbind(trade2, ab)
trade2 <- cbind(trade2, inter)
withint <- mlfitppml(dep="export",indep=5:17, fixed=c("iotu","ab", "inter"), lambdas=lambdas, data=trade2)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=FALSE,
lambdas = lambdas, colcheck_x=FALSE, colcheck_x_fes=FALSE)
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
iotu <- as.factor(c(rep("IO", 1000), rep("TU",times=dim(trade2)[1]-1000)))
ab <- as.factor(c(rep("B",times=1000),rep("A", 1000), rep("B",times=dim(trade2)[1]-2000)))
inter <- as.factor(rep("one", dim(trade2)[1]))
# fe_t <- c(rep(1, 300), rep(0,times=dim(trade2)[1]-300))
#fe_s <- c(rep(0,times=300), rep(1, 600), rep(0,times=dim(trade2)[1]-900))
trade2 <- cbind(trade2,iotu)
trade2 <- cbind(trade2, ab)
trade2 <- cbind(trade2, inter)
withint <- mlfitppml(dep="export",indep=5:17, fixed=c("iotu","ab", "inter"), lambdas=lambdas, data=trade2)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=FALSE,
lambdas = lambdas, colcheck_x=FALSE, colcheck_x_fes=FALSE)
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
names(results)
results <- as.data.frame(reg2$beta_pre)
results
results
reg2$beta_pre
results$provision <- row.names(results)
results <- reshape2::melt(results, id.vars = "provision", variable.name = "lambda",
value.name = "coefficient")
results$lambda <- as.numeric(as.character(results$lambda))
ggplot2::ggplot(data = results, mapping = ggplot2::aes(x = lambda, y = coefficient, col = provision)) +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::scale_x_reverse(expand = ggplot2::expansion(add = c(0, 0.015))) +
ggplot2::theme_classic() +
directlabels::geom_dl(ggplot2::aes(label = provision),
method = list(directlabels::dl.trans(x = x + 0.5), "last.bumpup")) +
ggplot2::labs(x = "Penalty parameter (lambda)", y = "Coefficient",
title = "Figure 1: Regularization path for lasso")
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
library(penppml)
selected <- countries$iso[countries$region %in% c("Americas")]
trade2 <- trade[(trade$exp %in% selected) & (trade$imp %in% selected), -(5:6)] # We remove columns 5 and
# 6 because these variables are not needed in our regressions.
load_all()
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=FALSE,
lambdas = lambdas, colcheck_x=FALSE, colcheck_x_fes=FALSE)
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
selected <- countries$iso[countries$region %in% c("Americas")]
trade2 <- trade[(trade$exp %in% selected) & (trade$imp %in% selected), -(5:6)] # We remove columns 5 and
# 6 because these variables are not needed in our regressions.
library(penppml)
library(devtools)
library(devtools)
library(penppml)
selected <- countries$iso[countries$region %in% c("Americas")]
trade2 <- trade[(trade$exp %in% selected) & (trade$imp %in% selected), -(5:6)] # We remove columns 5 and
# 6 because these variables are not needed in our regressions.
reg1 <- hdfeppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")))
results <- data.frame(prov = rownames(reg1$coefficients), b = reg1$coefficients, se = 0)
results$se[!is.na(reg1$coefficients)] <- reg1$se
results
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
lambdas = lambdas)
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
results$provision <- row.names(results)
results <- reshape2::melt(results, id.vars = "provision", variable.name = "lambda",
value.name = "coefficient")
results$lambda <- as.numeric(as.character(results$lambda))
ggplot2::ggplot(data = results, mapping = ggplot2::aes(x = lambda, y = coefficient, col = provision)) +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::scale_x_reverse(expand = ggplot2::expansion(add = c(0, 0.015))) +
ggplot2::theme_classic() +
directlabels::geom_dl(ggplot2::aes(label = provision),
method = list(directlabels::dl.trans(x = x + 0.5), "last.bumpup")) +
ggplot2::labs(x = "Penalty parameter (lambda)", y = "Coefficient",
title = "Figure 1: Regularization path for lasso")
lambdas <- c(0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = lambdas)
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
lambdas <- c(0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=FALSE,
lambdas = lambdas, colcheck_x=FALSE, colcheck_x_fes=FALSE)
load_all()
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=FALSE,
lambdas = lambdas, colcheck_x=FALSE, colcheck_x_fes=FALSE)
lambdas <- c(0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=FALSE,
lambdas = lambdas, colcheck_x=FALSE, colcheck_x_fes=FALSE)
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
lambdas = lambdas)
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
results$provision <- row.names(results)
results <- reshape2::melt(results, id.vars = "provision", variable.name = "lambda",
value.name = "coefficient")
results$lambda <- as.numeric(as.character(results$lambda))
ggplot2::ggplot(data = results, mapping = ggplot2::aes(x = lambda, y = coefficient, col = provision)) +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::scale_x_reverse(expand = ggplot2::expansion(add = c(0, 0.015))) +
ggplot2::theme_classic() +
directlabels::geom_dl(ggplot2::aes(label = provision),
method = list(directlabels::dl.trans(x = x + 0.5), "last.bumpup")) +
ggplot2::labs(x = "Penalty parameter (lambda)", y = "Coefficient",
title = "Figure 1: Regularization path for lasso")
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=FALSE,
lambdas = lambdas, colcheck_x=FALSE, colcheck_x_fes=FALSE)
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=FALSE,
lambdas = lambdas, colcheck_x=FALSE, colcheck_x_fes=FALSE)
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=TRUE,
lambdas = lambdas, colcheck_x=TRUE, colcheck_x_fes=TRUE)
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
results$provision <- row.names(results)
results <- reshape2::melt(results, id.vars = "provision", variable.name = "lambda",
value.name = "coefficient")
results$lambda <- as.numeric(as.character(results$lambda))
ggplot2::ggplot(data = results, mapping = ggplot2::aes(x = lambda, y = coefficient, col = provision)) +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::scale_x_reverse(expand = ggplot2::expansion(add = c(0, 0.015))) +
ggplot2::theme_classic() +
directlabels::geom_dl(ggplot2::aes(label = provision),
method = list(directlabels::dl.trans(x = x + 0.5), "last.bumpup")) +
ggplot2::labs(x = "Penalty parameter (lambda)", y = "Coefficient",
title = "Figure 1: Regularization path for lasso")
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = lambdas)
reg2_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = lambdas, colcheck_x=TRUE,
colcheck_x_fes=FALSE)
reg5_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = c(seq(0.5, 0.1, by = -0.1), 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001, 0),
xval = TRUE,
IDs =  cross_ids$fold, colcheck_x=TRUE,
colcheck_x_fes=TRUE)
id <- unique(trade[(trade$exp %in% selected) & (trade$imp %in% selected), 5])
nfolds <- 20
unique_ids <- data.frame(id = id, fold = sample(1:nfolds, size = length(id), replace = TRUE))
cross_ids <- merge(trade[(trade$exp %in% selected) & (trade$imp %in% selected), 5, drop = FALSE],
unique_ids, by = "id", all.x = TRUE)
reg5_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = c(seq(0.5, 0.1, by = -0.1), 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001, 0),
xval = TRUE,
IDs =  cross_ids$fold, colcheck_x=TRUE,
colcheck_x_fes=TRUE)
reg5_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = c(seq(0.5, 0.1, by = -0.1), 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001, 0),
xval = TRUE,
IDs =  cross_ids$fold, colcheck_x=TRUE,
colcheck_x_fes=FALSE)
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = lambdas, colcheck_x=TRUE,
colcheck_x_fes=FALSE)
load_all()
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = lambdas, colcheck_x=TRUE,
colcheck_x_fes=FALSE)
load_all()
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = lambdas, colcheck_x=TRUE,
colcheck_x_fes=FALSE)
reg3 <- penhdfeppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
lambda = 0.005, colcheck_x = FALSE, colcheck_x_fes=FALSE, post=FALSE)
lambdas <- seq(0.0001, 0, length.out = 10)
reg4 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "ridge",
lambdas = lambdas, colcheck_x=TRUE, colcheck_x_fes= TRUE, post=TRUE)
lambdas <- seq(0.0001, 0, length.out = 10)
reg4 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "ridge",
lambdas = lambdas, colcheck_x=TRUE, colcheck_x_fes= TRUE, post=TRUE)
id <- unique(trade[(trade$exp %in% selected) & (trade$imp %in% selected), 5])
nfolds <- 20
unique_ids <- data.frame(id = id, fold = sample(1:nfolds, size = length(id), replace = TRUE))
cross_ids <- merge(trade[(trade$exp %in% selected) & (trade$imp %in% selected), 5, drop = FALSE],
unique_ids, by = "id", all.x = TRUE)
reg5 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
lambdas = c(seq(0.5, 0.1, by = -0.1), 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001, 0),
xval = TRUE,
IDs =  cross_ids$fold, tol=1e-5)
reg5_nofe <- mlfitppml(data = trade2,
dep = "export",
fixed = NULL,
penalty = "lasso",
lambdas = c(seq(0.5, 0.1, by = -0.1), 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001, 0),
xval = TRUE,
IDs =  cross_ids$fold, colcheck_x=TRUE,
colcheck_x_fes=FALSE)
reg6 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
method = "plugin",
cluster = c("exp", "imp"))
results <- data.frame(prov = rownames(reg6$beta), b_pre = reg6$beta_pre, b = reg6$beta, se = 0)
results$se[!is.na(reg6$beta)] <- reg6$ses
results
iceberg_results <- iceberg(data = trade2[, -(1:4)],
dep = results$prov[results$b != 0],
selectobs = (trade2$time == "2016"))
reg1 <- hdfeppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")), colcheck_x = TRUE, colcheck_x_fes=FALSE)
results <- data.frame(prov = rownames(reg1$coefficients), b = reg1$coefficients, se = 0)
results$se[!is.na(reg1$coefficients)] <- reg1$se
results
results <- data.frame(prov = rownames(reg1$coefficients), b = reg1$coefficients, se = 0)
results$se[!is.na(reg1$coefficients)] <- reg1$se
knitr::kable(list(results[1:8, ], results[9:16, ]),
format = "pipe",
col.names = c("Provision", "Coefficient", "SE"),
caption = "Table 3: Unpenalized PPML results",
row.names = FALSE,
digits = 4)
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=TRUE,
lambdas = lambdas, colcheck_x=TRUE, colcheck_x_fes=TRUE)
results <- as.data.frame(reg2$beta_pre)
names(results) <- lambdas
results$provision <- row.names(results)
results <- reshape2::melt(results, id.vars = "provision", variable.name = "lambda",
value.name = "coefficient")
results$lambda <- as.numeric(as.character(results$lambda))
ggplot2::ggplot(data = results, mapping = ggplot2::aes(x = lambda, y = coefficient, col = provision)) +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::scale_x_reverse(expand = ggplot2::expansion(add = c(0, 0.015))) +
ggplot2::theme_classic() +
directlabels::geom_dl(ggplot2::aes(label = provision),
method = list(directlabels::dl.trans(x = x + 0.5), "last.bumpup")) +
ggplot2::labs(x = "Penalty parameter (lambda)", y = "Coefficient",
title = "Figure 1: Regularization path for lasso")
reg3 <- penhdfeppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
lambda = 0.005, colcheck_x = FALSE, colcheck_x_fes=FALSE, post=FALSE)
lambdas <- seq(0.0001, 0, length.out = 10)
reg4 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "ridge",
lambdas = lambdas, colcheck_x=TRUE, colcheck_x_fes= TRUE, post=TRUE)
id <- unique(trade[(trade$exp %in% selected) & (trade$imp %in% selected), 5])
nfolds <- 20
unique_ids <- data.frame(id = id, fold = sample(1:nfolds, size = length(id), replace = TRUE))
cross_ids <- merge(trade[(trade$exp %in% selected) & (trade$imp %in% selected), 5, drop = FALSE],
unique_ids, by = "id", all.x = TRUE)
reg5 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
lambdas = c(seq(0.5, 0.1, by = -0.1), 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001, 0),
xval = TRUE,
IDs =  cross_ids$fold, tol=1e-5)
load_all()
lambdas <- c(0.05, 0.025, 0.01, 0.0075, 0.005, 0.0025, 0.001, 0.00075, 0.0005, 0.00025, 0.0001, 0)
reg2 <- mlfitppml(data = trade2,
dep = "export",
fixed = list(c("exp", "time"),
c("imp", "time"),
c("exp", "imp")),
penalty = "lasso",
post=TRUE,
lambdas = lambdas, colcheck_x=TRUE, colcheck_x_fes=TRUE)
rm(list=ls())
FDI_LASSO_NA_REMOVED <- read_excel("../FDI_LASSO_NA_REMOVED.xlsx")
library(readxl)
library(devtools)
library(haven)
rm(list=ls())
FDI_LASSO_NA_REMOVED <- read_excel("../FDI_LASSO_NA_REMOVED.xlsx")
str(trade) #description from package
FDI_LASSO <- FDI_LASSO_NA_REMOVED # rename
str(FDI_LASSO)
FDI_LASSO$iso1.x <- as.factor(FDI_LASSO$iso1.x) #turn char to factors
class(FDI_LASSO$iso1.x)
FDI_LASSO$iso2.x <- as.factor(FDI_LASSO$iso2.x) #turn char to factors
class(FDI_LASSO$iso2.x)
FDI_LASSO$year.x <- as.factor(FDI_LASSO$year.x) #turn year to factor
FDI_LASSO$year.x <- factor(FDI_LASSO$year.x, ordered = TRUE,   #turn into original factor
levels = c("2004", "2008", "2012"))
class(FDI_LASSO$year.x)
FDI_LASSO[FDI_LASSO == "Unknown"] <- NA
FDI_LASSO[FDI_LASSO == "unknown"] <- NA
Missing_Value_Check <- data.frame(colSums(is.na(x=FDI_LASSO))) #missing value check
FDI_LASSO <- dplyr::select(.data = FDI_LASSO, #column cleaning
-KEY,
-export,
-id,
-agreement,
-fta_wto,
-EIA_bbf,
-fta_eia)
FDI_LASSO$FDI_OECD[FDI_LASSO$FDI_OECD < 0] <- 0
lambdas <- c(0.05, 0.025, 0.005, 0.0025, 0.001, 0.0005, 0.00025, 0.0001)
FDI_LASSO <- data.frame(FDI_LASSO)
reg1 <- mlfitppml(data = FDI_LASSO,
dep = "FDI_OECD",
indep = 8:337,
fixed = list(c("iso1.x", "year.x"),
c("iso2.x", "year.x"),
c("iso1.x", "iso2.x")),
penalty = "lasso",
lambdas = lambdas, post=FALSE, tol=1e-5)
